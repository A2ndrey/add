def getTasks(axisPlatforms, axisTools) {
    def tasks = [:]
    for(int i=0; i< axisPlatforms.size(); i++) {
        def axisPlatformsValue = axisPlatforms[i]
        for(int j=0; j< axisTools.size(); j++) {
            def axisToolValue = axisTools[j]
            tasks["${axisPlatformsValue}/${axisToolValue}"] = {
                build job: "Vanessa-ADD-Docker-${axisPlatformsValue}", parameters: [[$class: 'StringParameterValue', name: 'V8VERSION', value: "${axisPlatformsValue}"],
                                                 [$class: 'StringParameterValue', name:'ORDINARY_APP', value: "${axisToolValue}"]]
            }
        }
    }
    tasks["failFast"]=false
    return tasks
}
  
pipeline {

    agent any
    
    options { 
      buildDiscarder(logRotator(numToKeepStr: '10'))
      disableConcurrentBuilds()
      timeout(time: 120, unit: 'MINUTES')
      timestamps() 
    }
    
    stages {

       stage("Matrix") {
            steps {
                script {
                    def axisPlatforms = ["8.3.14.1630", "8.3.15.1489"]
                    def ordinaryApps = ["0","1"]
                    parallel getTasks(axisPlatforms, ordinaryApps)
                }
            }
        }    

    }

}

   
    